/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.hpe.pps.view;

import com.hpe.pps.biz.ProductBiz;
import com.hpe.pps.biz.ProductBizImpl;
import com.hpe.pps.biz.PurchaseBiz;
import com.hpe.pps.biz.PurchaseBizImpl;
import com.hpe.pps.biz.SupplierBiz;
import com.hpe.pps.biz.SupplierBizImpl;
import com.hpe.pps.po.Product;
import com.hpe.pps.po.Supplier;
import com.hpe.pps.util.FrameUtil;
import com.hpe.pps.util.FrameUtil2;
import com.hpe.pps.util.NoUtil;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author yhy
 */
public class PurchaseInFrame extends javax.swing.JInternalFrame {
     //引入biz
    ProductBiz  pbiz = new ProductBizImpl();
    SupplierBiz supbiz = new SupplierBizImpl();
    PurchaseBiz purbiz = new PurchaseBizImpl();
    ArrayList<Product> purlist = new ArrayList<Product>();
    //选择项rowid
    int selectedRow = -1;
    /**
     * Creates new form PurchaseFrame
     */
    public PurchaseInFrame() {
        initComponents();
        initPurchaseTable();//初始化供应商
    }
    public void initPurchaseTable(){
        JComboBox cobsup = new JComboBox();//创建组合框
        List<Supplier> suplist = supbiz.findAll();//获取所有的供应商
        for(Supplier sup: suplist){
            cobsup.addItem(sup);//往组合框中添加供应商对象
        }
        this.tblPurchase.getColumnModel().getColumn(6).setCellEditor(new DefaultCellEditor(cobsup)); 
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        tblPurchase = new javax.swing.JTable();
        btnQuery = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblProduct = new javax.swing.JTable();
        btnDelete = new javax.swing.JButton();
        btnPurchaseIn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtConditions = new javax.swing.JTextField();

        setClosable(true);
        setTitle("采购入库");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosed(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        tblPurchase.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "商品编号", "商品名称", "商品型号", "建议购买价", "采购量", "采购价格", "供应商"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, false, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblPurchase.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblPurchaseMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblPurchase);

        btnQuery.setText("查询");
        btnQuery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQueryActionPerformed(evt);
            }
        });

        tblProduct.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "商品编号", "商品名称", "商品型号", "商品库存", "建议购买价"
            }
        ));
        tblProduct.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblProductMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblProduct);

        btnDelete.setText("删除");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnPurchaseIn.setText("采购入库");
        btnPurchaseIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPurchaseInActionPerformed(evt);
            }
        });

        jLabel1.setText("加入采购：");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jLabel1)
                        .addGap(0, 664, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnPurchaseIn)
                        .addGap(42, 42, 42)
                        .addComponent(btnDelete))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(239, 239, 239)
                .addComponent(txtConditions, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47)
                .addComponent(btnQuery)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtConditions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnQuery))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPurchaseIn)
                    .addComponent(btnDelete)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnPurchaseInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPurchaseInActionPerformed
        // TODO add your handling code here:
        //获取信息
        DefaultTableModel dtm = (DefaultTableModel) this.tblPurchase.getModel();
        
        
        Object[][] purchase = new Object[dtm.getRowCount()][7];//根据具体数值数创建采购数组
        Object[][] stocks = new Object[dtm.getRowCount()][3];//商品库存数组
        
      //遍历表格
        for(int i=0;i<dtm.getRowCount();i++){
            purchase[i][0] = NoUtil.createPurno();//采购单号
            purchase[i][1] = this.tblPurchase.getValueAt(i, 0);//商品编号
            stocks[i][2] = this.tblPurchase.getValueAt(i, 0); //第3个?
            purchase[i][2] = this.tblPurchase.getValueAt(i, 4);//采购数量
            stocks[i][0] = this.tblPurchase.getValueAt(i, 4);
            purchase[i][3] = this.tblPurchase.getValueAt(i, 5);//采购价格
            //总金额，价格 * 数量
            purchase[i][4] = new BigDecimal(purchase[i][3].toString()).multiply(new BigDecimal(purchase[i][2].toString()));
           
            Supplier sup = (Supplier)this.tblPurchase.getValueAt(i, 6);
            
            purchase[i][5] = sup.getSupplierid();
            purchase[i][6] = new java.util.Date();
            stocks[i][1] = new java.util.Date();
        }
        //调用批量添加
        boolean result = purbiz.purchasein(purchase, stocks);
       
        if(result == true){
            JOptionPane.showMessageDialog(this, "采购入库成功");
            //更新商品表
            btnQueryActionPerformed(evt);//调用查询方法
        }else{
            JOptionPane.showMessageDialog(this, "采购入库失败");
        }
        //清空采购表
        while(dtm.getRowCount()>0){
            dtm.removeRow(0);
        }
    }//GEN-LAST:event_btnPurchaseInActionPerformed

    private void btnQueryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQueryActionPerformed
        //查询需要购买的商品
        //1 获得条件
        String conditions = this.txtConditions.getText().trim();
        //2 通过查询业务获得商品集合
        List<Product> list = pbiz.findByCondition(conditions);
        //3 显示在表格
        showOnProductTable(list);
        
    }//GEN-LAST:event_btnQueryActionPerformed

    private void tblProductMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblProductMouseClicked
       // 将选择的商品添加到需要采购的table上
        int selectrow = this.tblProduct.getSelectedRow();
        Integer pid = (Integer) this.tblProduct.getValueAt(selectrow, 0);
        String pname = (String) this.tblProduct.getValueAt(selectrow, 1);
        String ptype = (String) this.tblProduct.getValueAt(selectrow, 2);
        Integer currentamount = (Integer) this.tblProduct.getValueAt(selectrow, 3);
        BigDecimal suggestpurchaseprice = (BigDecimal) this.tblProduct.getValueAt(selectrow, 4);
        Vector vt = new Vector();
        vt.add(pid); // vt.get(0)
        vt.add(pname);
        vt.add(ptype);
        vt.add(suggestpurchaseprice);
        //添加到采购表格
        addPurchaseTable(vt); 
    }//GEN-LAST:event_tblProductMouseClicked

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        //删除需要采购的信息
        if(selectedRow == -1){
            JOptionPane.showMessageDialog(this, "请选择要删除的采购信息");
            return ;
        }
        DefaultTableModel dtm = (DefaultTableModel) this.tblPurchase.getModel();
        dtm.removeRow(selectedRow);
        selectedRow = -1; //还原选择行号
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void tblPurchaseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblPurchaseMouseClicked
       selectedRow = this.tblPurchase.getSelectedRow();
    }//GEN-LAST:event_tblPurchaseMouseClicked

    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed
       //窗口关闭从map中移除
        FrameUtil2.framemap.remove(PurchaseInFrame.class.getName());
    }//GEN-LAST:event_formInternalFrameClosed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnPurchaseIn;
    private javax.swing.JButton btnQuery;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblProduct;
    private javax.swing.JTable tblPurchase;
    private javax.swing.JTextField txtConditions;
    // End of variables declaration//GEN-END:variables

    private void showOnProductTable(List<Product> list) {
        //1 获得表格模型
        DefaultTableModel dtm = (DefaultTableModel) this.tblProduct.getModel();
        //2 清空表格
        while(dtm.getRowCount()>0){
            dtm.removeRow(0);
         }
        // 3添加到表格
        for(Product p: list){
            Vector vt = new Vector();
            vt.add(p.getPid());
            vt.add(p.getPname());
            vt.add(p.getPtype());
            vt.add(p.getCurrentamount());
            vt.add(p.getSuggestpurchaseprice());
            dtm.addRow(vt);
        }
    }

//    private void addPurchaseTable(List<Product> purlist) {
//        //获得表格模型
//        DefaultTableModel dtm = (DefaultTableModel) this.tblPurchase.getModel();
//        //清空
//        while(dtm.getRowCount()>0){
//            dtm.removeRow(0);
//        }
//        //添加
//        for(Product p: purlist){
//            Vector vt = new Vector();
//            vt.add(p.getPid());
//            vt.add(p.getPname());
//            vt.add(p.getPtype());
//            vt.add(p.getSuggestpurchaseprice());
//            dtm.addRow(vt);
//        }
//    }
//
//
//
//    private void addToList(Product p) {
//       boolean flag = false;
//       for(int i=0;i<purlist.size();i++){
//           if(p.getPid() == purlist.get(i).getPid()){
//               flag = true;
//               break;
//           }
//       }
//       if(flag == false){
//           purlist.add(p);
//       }
//    }

    private void addPurchaseTable(Vector vt) {
        boolean flag = false;
        DefaultTableModel dtm = (DefaultTableModel) this.tblPurchase.getModel();
        for(int i=0;i<dtm.getRowCount();i++){
            if(vt.get(0) == tblPurchase.getValueAt(i, 0)){
                flag = true;
                break;
            }
        }
        if(flag == false){
            dtm.addRow(vt);
        }
    }
}
